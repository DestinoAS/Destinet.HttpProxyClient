using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Primitives;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;

namespace Destinet.HttpProxyClientTest
{
    public class Program
    {

        public static void Main(string[] args)
        {


            //var httpClient = new HttpClient();

            //var httpMessage = new HttpRequestMessage();

            ////HeaderDictionary headerdictionary = new HeaderDictionary();
            ////headerdictionary.Add("Cookies", new Microsoft.Extensions.Primitives.StringValues(new string[] { "name=value", "name2=value2" }));

            //var stringValues = new StringValues(new string[] { "name=value", "name2=value2" });

            ////var sValue = headerdictionary["Cookies"];
            //string[] headerValues = stringValues;

            //httpMessage.Headers.TryAddWithoutValidation("Cookies", headerValues);

            //foreach (var value in httpMessage.Headers)
            //    Console.WriteLine(value.Key + "=>" + string.Join(';', value.Value));

            CreateHostBuilder(args).Build().Run();

        }


        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseStartup<Startup>();
                });

    }


    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        public void ConfigureServices(IServiceCollection services)
        {
            services.AddRazorPages();
        }

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {

            //http://acona0.fuf.me:5000/home?DoRequestTest=1
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Error");
                //app.UseHsts();
            }


            app.Use(async (context, next) =>
            {

                var httpClientProxy = new HttpProxyClient();

                await httpClientProxy.ProxyAsync(context, "http://acona0.fuf.me");


                // Do work that doesn't write to the Response.
                //await next.Invoke();
                // Do logging or other work that doesn't write to the Response.
            });

            //app.UseHttpsRedirection();
            //app.UseStaticFiles();

            //app.UseRouting();

            //app.UseAuthorization();

            //app.UseEndpoints(endpoints =>
            //{
            //    endpoints.MapRazorPages();
            //});



        }
    }


}
